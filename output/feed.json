{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog.sheepht.com",
    "description": "",
    "home_page_url": "https://blog.sheepht.com",
    "feed_url": "https://blog.sheepht.com/feed.json",
    "user_comment": "",
    "icon": "https://blog.sheepht.com/media/website/sheepht-700-transparent.png",
    "author": {
        "name": "sheepht"
    },
    "items": [
        {
            "id": "https://blog.sheepht.com/yi-ge-wan-quan-bu-dong-nodejs-de-renye-neng-yong-cursor-xie-line-bot-ying-yong.html",
            "url": "https://blog.sheepht.com/yi-ge-wan-quan-bu-dong-nodejs-de-renye-neng-yong-cursor-xie-line-bot-ying-yong.html",
            "title": "一個完全不懂 Node.js 的人，也能用 Cursor 寫 LINE Bot 應用",
            "summary": "身為一個熟悉 Python 的開發者，過去主要在資料處理與工具開發領域打滾，但如果你問我 npm install 到底裝去哪、.ts 和 .js 差在哪裡，那真的是知識空白區 XD 這次的目標是打造一個 LINE Bot，功能簡單直接：使用者在群組中輸入「+1」「-1」，系統會自動計算報名狀況，並回報至&hellip;",
            "content_html": "<p data-pm-slice=\"1 1 []\">身為一個熟悉 Python 的開發者，過去主要在資料處理與工具開發領域打滾，但如果你問我 <code>npm install</code> 到底裝去哪、<code>.ts</code> 和 <code>.js</code> 差在哪裡，那真的是知識空白區 XD</p>\n<p>這次的目標是打造一個 LINE Bot，功能簡單直接：使用者在群組中輸入「+1」「-1」，系統會自動計算報名狀況，並回報至 LINE 群組。</p>\n<p>雖然直接可以用 Python 寫，但剛好想嘗試看看 —— 如果完全不懂的語言，只靠 Cursor，我能寫出什麼程度的東西？</p>\n<p> </p>\n<h2 data-pm-slice=\"1 1 []\">開工前的準備：先定義 Cursor 規則</h2>\n<p data-pm-slice=\"1 1 []\">一開始並沒有選用 <code>npx</code> 建立預設專案，而是直接開了資料夾，把 <code>.cursor/*.mdc</code> 寫好。</p>\n<p data-pm-slice=\"1 1 []\">這邊可以查到各語言的 Cursor Rule 範例<br><a href=\"https://github.com/PatrickJS/awesome-cursorrules\">https://github.com/PatrickJS/awesome-cursorrules</a></p>\n<p data-pm-slice=\"1 1 []\">再來是需要寫好專案的 SPEC（要做什麼、不做什麼），可以省下很多返工的時間。<br>就像寫測試前先寫好需求，AI 幫你開發時也需要類似的界線感。<br>當 Cursor 自己爆走的時候，也可以回到 SPEC 文件提醒它。</p>\n<p class=\"\" data-start=\"90\" data-end=\"114\">以下是一些建議的 <code data-start=\"99\" data-end=\"104\">.md</code> 檔案及其內容範例：</p>\n<h3 class=\"\" data-start=\"116\" data-end=\"137\"><code data-start=\"120\" data-end=\"137\">.cursor/spec.md</code></h3>\n<p class=\"\" data-start=\"138\" data-end=\"219\"><span class=\"relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out\">描述專案的功能需求與範圍，明確指出哪些功能需要實作。</span>​</p>\n<p class=\"\" data-start=\"221\" data-end=\"302\"><span class=\"relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out\">範例：</span></p>\n<pre class=\"language-markdown\"><code>## 專案目標\n建立一個 LINE Bot，使用者輸入「+1」時，系統登記報名並回報目前狀態。\n\n## 功能需求\n- 接收 LINE webhook 訊息\n- 處理「+1」與「取消」指令\n- 回報目前報名人數與暱稱清單\n- 支援重置報名清單</code></pre>\n<h3 class=\"\" data-start=\"474\" data-end=\"503\"><code data-start=\"478\" data-end=\"503\">.cursor/architecture.md</code></h3>\n<p class=\"\" data-start=\"504\" data-end=\"585\"><span class=\"relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out\">說明專案的架構設計，包括目錄結構、模組劃分等。</span></p>\n<p data-start=\"504\" data-end=\"585\">範例：</p>\n<pre class=\"language-markdown\"><code>## 專案架構\n- `src/`：主要程式碼目錄\n  - `handlers/`：處理各種 webhook 事件\n  - `services/`：業務邏輯處理\n  - `utils/`：工具函式\n- `tests/`：測試程式碼</code></pre>\n<h3 class=\"\" data-start=\"801\" data-end=\"828\"><code data-start=\"805\" data-end=\"828\">.cursor/styleguide.md</code></h3>\n<p class=\"\" data-start=\"829\" data-end=\"914\"><span class=\"relative -mx-px my-[-0.2rem] rounded px-px py-[0.2rem] transition-colors duration-100 ease-in-out\">定義程式碼風格與命名規範，確保 AI 生成的程式碼符合團隊標準。</span></p>\n<p data-start=\"829\" data-end=\"914\">範例：</p>\n<pre class=\"language-markdown\"><code>## 命名規範\n- 變數與函式使用 camelCase\n- 類別名稱使用 PascalCase\n- 常數使用全大寫加底線（例如：MAX_VALUE）\n\n## 程式碼風格\n- 使用 2 個空格作為縮排\n- 每行程式碼不超過 80 個字元\n- 函式應包含簡短的註解說明其功能\n</code></pre>\n<p>建議在專案初期就建立這些文件，並在開發過程中持續更新，這樣即使 AI 在生成程式碼時出現偏差，也可以透過這些文件快速校正方向。</p>\n<p> </p>\n<h2 data-pm-slice=\"1 1 []\">開發過程：用 Python 腦袋駕馭 Node.js 世界</h2>\n<p>描述需求的方式，則是延續了寫 Python 時的習慣，具備基本程式邏輯知識，跨語言開發可以使用更精準的關鍵字，只要描述得夠清楚，回傳的程式碼品質都很不錯。</p>\n<p data-pm-slice=\"1 1 []\">舉例來說：</p>\n<p data-pm-slice=\"1 1 []\">「我想記錄一組使用者的報名狀態，每個使用者都有一個 ID，並對應到一些動態資訊，例如報名時間或暱稱。像是 Python 的 Dict <code>user_id -&gt; { nickname, time }</code></p>\n<p data-pm-slice=\"1 1 []\">即使實際語法在 JS 或 TypeScript 中不同，只要能清楚表達出邏輯目的，Cursor 幾乎都能正確 map 到對應語言的語法與實作方式。</p>\n<h2 data-pm-slice=\"1 1 []\">常見踩雷：每個需求，小塊小塊處理最好</h2>\n<p data-pm-slice=\"1 1 []\">專案結構一旦搭好，就進入功能拆解流程。</p>\n<p>初期曾經嘗試一次請它實作多個功能（處理訊息、更新報名、回傳狀態），結果它直接改掉整個架構，還複製出一堆重複邏輯（不停的向後兼容😵‍💫）</p>\n<p>後來採用「一次請它處理一個功能」的方式，穩定度就高很多。</p>\n<p> </p>\n<h2 data-pm-slice=\"1 1 []\">成果：Pluseal 活動報名工具</h2>\n<p><a href=\"https://pluseal.sheepht.com/\" target=\"_blank\" rel=\"noopener noreferrer\">LINE +1 報名活動海豹 Pluseal</a> <br>是這次實驗做出來的成果</p>\n<p data-pm-slice=\"1 1 []\">在 LINE 群組中輸入「+1」、「-1」，就會自動登記活動報名、回報名單，讓主揪不用再花力氣手動計算，是個方便實用的日常小工具唷 :)</p>\n<p data-pm-slice=\"1 1 []\"> </p>\n<h2 data-pm-slice=\"1 1 []\">結語：即使對語法不熟，也能完成一個完整產品</h2>\n<p data-pm-slice=\"1 1 []\">AI 工具出現後，開發的順序已經反過來： 不是「會某個語言 → 才能做某種產品」，而是「有想法 → 定義 SPEC → 讓 AI 幫你完成技術路徑」。</p>\n<p>這次的 Pluseal 就是個範例：<br>Node.js 從 0 開始， 但靠著明確描述與善用工具，一樣能讓它跑上 Production。</p>\n<blockquote>\n<p>btw，所有使用到的圖像化元素也都是搭配 GPT 等工具生成的唷~</p>\n</blockquote>",
            "image": "https://blog.sheepht.com/media/posts/5/ChatGPT-Image-2025Nian-4Yue-12Ri-Xia-Wu-08_38_20.png",
            "author": {
                "name": "黑羊 JF"
            },
            "tags": [
                   "開發",
                   "Cursor",
                   "AI"
            ],
            "date_published": "2025-04-12T23:14:32+08:00",
            "date_modified": "2025-04-12T23:43:40+08:00"
        }
    ]
}
